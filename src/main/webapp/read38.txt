# read38.txt
스프링은 기본적으로 객체(빈)를 하나만 생성하여 관리함(싱글턴) 
(싱글턴 패턴과는 다릅니다. 하지만 하나라는 의미는 같아요) 

지금까지 빈 등록 <bean id="" class="" /> 

빈등록 어노테이션
  @Component (별칭 : @Controller , @Service , @Repository ) <- Spring 제공 
  @Bean <- JSR ( 주로 자바설정에서 사용)

주입관련(injection) 어노테이션   
  @Autowired  <- Spring 제공 (생성자, 세터, 필드) 타입기반 
                 (동일타입이 있는 경우 @Qualifier 사용)  
  @Resource   <- JSR 초기표준 (생성자, 세터, 필드) 이름기반 (여러 생성자 주입에서 오류) 
  @Inject   <- JSR 표준 (생성자, 세터, 필드) 타입기반
                (동일타입이 있는 경우 @Qualifier 사용)
  @Value   <- 일반 리터럴(문자, 숫자, 날짜) 

생명주기관련 어노테이션 
  @PostConstruct : 생성되고 나서 호출
  @PreDestroy : 삭제 전 호출   
-----------------------------------------------------------------------



// 객체가 한개만 생성되게 하려면 어떻게 해야 될까??

디자인 패턴이란?
비슷한 문제 상황을 해결했던 해결책을 잘 기억하고 다시 적용할 수 있다면 유용할 것이다. 
더 잘 기억하고, 또 동료 개발자들과 잘 공유하기 위한 방법이 곧 ‘이름’을 지어주는 것이다.

소프트웨어 공학에서 디자인 패턴(Design pattern)은 
프로그램 개발 시에 자주 부닥치는 애로 상황에 대한 일반적이고 재사용 가능한 추상화된 해결책이다.
 이런 해결책들은 일반적인 문제를 해결하기 위한 
 Best practice를 어느 정도 공식화하고 정의했다고도 할 수 있다.
 
 - Creational patterns
   이 디자인 패턴은 ‘Creat’라는 어미에 맞게 클래스의 인스턴스를 만드는 것과 관련이 있다.
   이 패턴을 더 분류하면 인스턴스 생성 시에 상속을 효과적으로 사용하는 데 집중하는 ‘Class-creation patterns’와 인스턴스를 효과적으로 생성하기 위해 상속 대신 Delegation을 활용하는 ‘Object-creation patterns’가 있다.
   (Delegation 개념을 어떻게 설명할지 확신이 안 서는데 넘어가자)
 
 - Structural patterns
   Structural patterns는 클래스나 인스턴스들의 관계와 관련이 있다. 
   잘 짠 프로그램은 여러 기능들이 적절히 모듈화되어 서로간에 물고 물리는 관계 속에서 동작한다. 
   이들의 구조를 확실히 하고, 단순하게 하며 서로간에 인터페이스를 명확히 하고 맞추는 것이 필요하다.
   이 패턴은 그것과 관련이 있다.
   예제로 파악하자. 이 패턴의 종류 중에는 ‘Adapter’ 패턴이 있다.

 - Behavioral patterns
   Behavioral patterns는 클래스나 인스턴스의 패턴뿐만 아니라, 
   이들이 동작하는 방식, 이들의 소통(Communication)방식에도 패턴을 정의한다.
   이 패턴들은 객체 속 작업이 진행되는 워크 플로우를 정의하고 따라갈 수 있기 때문에 유용하다.

 
 